# Generated by Django 5.2 on 2025-09-19 19:17

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('address', '__first__'),
        ('auth', '0012_alter_user_first_name_max_length'),
        ('tariff', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('balance', models.DecimalField(decimal_places=2, default=0.0, max_digits=15, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Баланс')),
                ('ws_status', models.BooleanField(default=False, verbose_name='Статус подачи воды')),
                ('auto_payment', models.BooleanField(default=False, verbose_name='Автооплата')),
                ('start_datetime_pp', models.DateTimeField(blank=True, null=True, verbose_name='Дата&Время начала оплаченного периода')),
                ('end_datetime_pp', models.DateTimeField(blank=True, null=True, verbose_name='Дата&Время конца оплаченного периода')),
                ('phone', models.CharField(max_length=15, null=True, unique=True, verbose_name='Номер телефона')),
                ('is_new', models.BooleanField(default=True, verbose_name='Новый пользователь')),
                ('payment_method', models.CharField(max_length=36, null=True, verbose_name='ID автоплатежа')),
                ('address', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='address.address', verbose_name='Адрес')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('next_tariff_plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='next_tariff_planes', to='tariff.tariffplan', verbose_name='Следующий тариф')),
                ('tariff_plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='tariff_planes', to='tariff.tariffplan', verbose_name='Тариф')),
                ('tariffs', models.ManyToManyField(to='tariff.tariffplan', verbose_name='Все тарифы')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
